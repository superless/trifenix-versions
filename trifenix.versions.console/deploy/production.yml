# termine, parte 1.

trigger:
    branches:
      include:        
        - master  
pool:
  vmImage: "windows-latest"

variables: 
  BuildConfiguration: 'release'
  # nombre del archivo csproj
  name-project: "trifenix.versions.console"

  
# github ejecuta este build, para validar y ejecutar,
# es decir, dos veces
# esta instrucción asigna que no se ejecute en el pull request (para validar).
# sino, que solo se ejecute al modificar la rama.
pr: none
  
steps:

  
  # toma todos los proyectos que existan además de quien tiene el nuget.
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: '$(default-feed)'      
      versioningScheme: byBuildNumber


  # genera paquete usando la versión proporcionada por gitversion
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack' 
    inputs: 
      command: pack
      packagesToPack: '**/$(name-project).csproj'       
      arguments: '--configuration $(BuildConfiguration) /p:Version=0.0.1'
      
      

  # publica paquete para publicar.
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: drop
      publishLocation: 'container'
    displayName: "publish nuget"